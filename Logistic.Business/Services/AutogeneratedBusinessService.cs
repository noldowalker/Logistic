using System.Text.Json;
using Domain.Interfaces;
using Domain.Models;
using Logistic.Application.BusinessServiceResults;
using Logistic.Application.Mappers;

namespace Logistic.Application.Services;

public class AutogeneratedBusinessService<T> : IBusinessService where T : BaseModel 
{
    public List<WorkRecord> ActionRecords { get; set; }
    public bool IsLastActionSuccessful { get => ActionRecords.IsContainErrors(); } 
        
    private readonly IBaseModelsRepository<T> _repository;
    private readonly AutogeneratedMapper<T> _mapper;
    private bool _isLastActionSuccessful;
    
    public AutogeneratedBusinessService(IBaseModelsRepository<T> repository)
    {
        _repository = repository;
        _mapper = new AutogeneratedMapper<T>();
        ActionRecords = new List<WorkRecord>();
    }
    
    public virtual List<object> GetList()
    {
        var entities = _repository.GetList().ToList();

        return entities.Select(entity => _mapper.MapFromDomain(entity)).ToList();
    }
    
    public virtual object? Get(long id)
    {
        var entity = _repository.Get(id);

        if (entity == null)
            throw new Exception("Для указанного id не найдена сущность");

        return _mapper.MapFromDomain(entity);
    }

    public virtual async Task Update(List<object> entities)
    {
        var domainEntities = new List<T>();
        foreach (var entity in entities)
        {
            var domainEntity = _mapper.MapToDomain((JsonElement)entity);
            
            if (domainEntity != null)
                domainEntities.Add(domainEntity);
        }

        foreach (var domainEntity in domainEntities)
        {
            _repository.Update(domainEntity);
            await _repository.SaveAsync();
        }
    }
}