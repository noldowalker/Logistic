using System.Reflection;
using System.Text.Json;
using Domain.Interfaces;
using Domain.Models;
using Domain.WorkResults;

namespace Logistic.Application.Services;

public class AutogeneratedBusinessService<T> : IBusinessService<T> where T : BaseModel 
{
    public IWorkResult Results { get; set; }
        
    private readonly IBaseModelsRepository<T> _repository;
    
    public AutogeneratedBusinessService(IBaseModelsRepository<T> repository, IWorkResult results)
    {
        _repository = repository;
        Results = results;
    }
    
    public virtual List<T> GetList()
    {
        var entities = _repository.GetList().ToList();

        return entities;
    }
    
    public virtual T? Get(long id)
    {
        var entity = _repository.Get(id);

        if (entity == null)
            throw new Exception("Для указанного id не найдена сущность");

        return entity;
    }

    public virtual async Task<List<T>?> Update(List<object> entities)
    {
        var domainEntities = new List<T>();
        foreach (var entity in entities)
        {
            var domainEntity = MapToDomain((JsonElement)entity);
            
            if (domainEntity != null)
                domainEntities.Add(domainEntity);
        }

        var result = new List<T>();
        foreach (var domainEntity in domainEntities)
        {
            //ToDo: всплытие ошибок
            await _repository.Update(domainEntity);
            await _repository.SaveAsync();
            result.Add(domainEntity);
        }

        return result;
    }
    
    public T? MapToDomain(JsonElement entity)
    {
        var type = typeof(T);
        var constructor = type.GetConstructor(new Type[] {});
        var result = (T) constructor?.Invoke(new T[] { });
        
        foreach (var field in typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance))
        {
            var isPropertyInRequest = entity.TryGetProperty(field.Name, out JsonElement requestProperty);
            
            if (!isPropertyInRequest)
                continue;

            var value = GetValueForPropertyInJson(field, requestProperty);
            field.SetValue(result, value);
        }
        
        return result;
    }

    private object? GetValueForPropertyInJson(PropertyInfo field, JsonElement value)
    {
        var valueKind = value.ValueKind;
        var propertyTypeName = field.PropertyType.Name;
        var propertyType = field.PropertyType;
        if (field.PropertyType.IsSubclassOf(typeof(BaseModel)))
            propertyTypeName = "BaseModelChild";

        switch (propertyTypeName)
        {
            case "Int64":
                return (valueKind == JsonValueKind.Number) ? value.GetInt64() : null;
            case "String":
                return (valueKind == JsonValueKind.String) ? value.GetString() : null;
            case "BaseModelChild": 
                var JSONCovert = typeof(JsonSerializer);
                var parameterTypes = new[] { typeof(JsonElement), typeof(JsonSerializerOptions) };
                var deserializer = JSONCovert
                    .GetMethods(BindingFlags.Public | BindingFlags.Static)
                    .Where(i => i.Name.Equals("Deserialize", StringComparison.InvariantCulture))
                    .Where(i => i.IsGenericMethod)
                    .Single(i => i.GetParameters().Select(a => a.ParameterType).SequenceEqual(parameterTypes));
                var options = new JsonSerializerOptions();
                var genericMethodInfo = deserializer.MakeGenericMethod(propertyType);
                return (valueKind == JsonValueKind.Object) ?  genericMethodInfo.Invoke(value, new object[] { value, options }) : null;
            case "Boolean": 
                return valueKind is JsonValueKind.True or JsonValueKind.False ? value.GetBoolean() : null;
            default:
                return null;
        }
    }

}