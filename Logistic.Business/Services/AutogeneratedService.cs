using System.Reflection;
using System.Text.Json;
using Domain.Interfaces;
using Domain.Models;
using Domain.WorkResults;
using Microsoft.Extensions.DependencyInjection;

namespace Logistic.Application.Services;

public class AutogeneratedService<T> : IBusinessService<T> where T : BaseModel 
{
    public IWorkResult Results { get; set; }
        
    private readonly IBaseModelsRepository<T> _repository;
    private readonly IServiceProvider _serviceProvider;
    
    public AutogeneratedService(IBaseModelsRepository<T> repository, IWorkResult results, IServiceProvider serviceProvider)
    {
        _repository = repository;
        Results = results;
        _serviceProvider = serviceProvider;
    }
    
    public virtual List<T> GetList()
    {
        var entities = _repository.GetList().ToList();

        return entities;
    }
    
    public virtual T? Get(long id)
    {
        var entity = _repository.Get(id);

        if (entity == null)
            throw new Exception("Для указанного id не найдена сущность");

        return entity;
    }

    public virtual async Task<List<T>?> Create(List<object> entities)
    {
        var domainEntities = new List<T>();
        foreach (var entity in entities)
        {
            var domainEntity = MapToDomain((JsonElement)entity);
            
            if (domainEntity != null)
                domainEntities.Add(domainEntity);
        }

        var result = new List<T>();
        foreach (var domainEntity in domainEntities)
        {
            //ToDo: всплытие ошибок
            await UpdateLinks(domainEntity);
            await _repository.Create(domainEntity);
            await _repository.SaveAsync();
            result.Add(domainEntity);
        }

        return result;
    }

    public virtual async Task<List<T>?> Update(List<object> entities)
    {
        var domainEntities = new List<T>();
        foreach (var entity in entities)
        {
            var domainEntity = MapToDomain((JsonElement)entity);
            
            if (domainEntity != null)
                domainEntities.Add(domainEntity);
        }

        var result = new List<T>();
        foreach (var domainEntity in domainEntities)
        {
            //ToDo: всплытие ошибок
            await UpdateLinks(domainEntity);
            await _repository.Update(domainEntity);
            await _repository.SaveAsync();
            result.Add(domainEntity);
        }

        return result;
    }

    private async Task UpdateLinks(T entity)
    {
        var entityType = typeof(T);
        var baseModelType = typeof(BaseModel);
        
        foreach (var property in entityType.GetProperties())
        {
            if (!baseModelType.IsAssignableFrom(property.PropertyType))
                continue;
            
            var repoType = typeof(IBaseModelsRepository<>).MakeGenericType(property.PropertyType);
            var propertyRepo = _serviceProvider.GetRequiredService(repoType);
            if (propertyRepo == null)
                continue;
            
            var validatorType = typeof(IValidatable<>).MakeGenericType(property.PropertyType);
            var propertyValidator = _serviceProvider.GetRequiredService(validatorType);
            if (propertyValidator == null)
                continue;
            
            var method = repoType.GetMethod("Get", new Type[] { typeof(long) });
            if (method == null)
                continue;
            
            var linkValue = property.GetValue(entity); 
            if (linkValue == null)
                continue;

            MethodInfo getOrCreateMethod = GetType().GetMethod(nameof(GetOrCreatePropertyValue), BindingFlags.NonPublic | BindingFlags.Instance);
            MethodInfo genericMethod = getOrCreateMethod.MakeGenericMethod(property.PropertyType);
            var parameters = new object[] { linkValue, propertyRepo, propertyValidator };
            dynamic task = genericMethod.Invoke(this, parameters);
            var result = await task;
            
            if (result != null)
            {
                property.SetValue(entity, result);
            }
            
            property.SetValue(entity, result);
        }
    }
    
    private async Task<TLink?> GetOrCreatePropertyValue<TLink>(
        TLink valueInEntity, 
        IBaseModelsRepository<TLink> repository,
        IValidatable<TLink> validator) where TLink : BaseModel
    {
        TLink? result;
        if (valueInEntity.id > 0)
        {
            if (!validator.IsValidForUpdate(valueInEntity))
                return null;
            
            result = await repository.Update(valueInEntity);
        }
        else
        {
            if (!validator.IsValidForCreate(valueInEntity))
                return null;
            
            result = await repository.Create(valueInEntity);
            await repository.SaveAsync();
        }

        return result;
    }
    
    private T? MapToDomain(JsonElement entity)
    {
        var type = typeof(T);
        var constructor = type.GetConstructor(new Type[] {});
        var result = (T) constructor?.Invoke(new T[] { });
        
        foreach (var field in typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance))
        {
            var firstChar = char.ToLower(field.Name[0]);
            var modifiedFieldName = firstChar + field.Name.Substring(1);
            var isPropertyInRequest = entity.TryGetProperty(modifiedFieldName, out JsonElement requestProperty);
            
            if (!isPropertyInRequest)
                continue;

            var value = GetValueForPropertyInJson(field, requestProperty);
            field.SetValue(result, value);
        }
        
        return result;
    }

    private object? GetValueForPropertyInJson(PropertyInfo field, JsonElement value)
    {
        var valueKind = value.ValueKind;
        var propertyTypeName = field.PropertyType.Name;
        var propertyType = field.PropertyType;
        if (field.PropertyType.IsSubclassOf(typeof(BaseModel)))
            propertyTypeName = "BaseModelChild";

        switch (propertyTypeName)
        {
            case "Int64":
                return (valueKind == JsonValueKind.Number) ? value.GetInt64() : null;
            case "String":
                return (valueKind == JsonValueKind.String) ? value.GetString() : null;
            case "BaseModelChild": 
                var JSONCovert = typeof(JsonSerializer);
                var parameterTypes = new[] { typeof(JsonElement), typeof(JsonSerializerOptions) };
                var deserializer = JSONCovert
                    .GetMethods(BindingFlags.Public | BindingFlags.Static)
                    .Where(i => i.Name.Equals("Deserialize", StringComparison.InvariantCulture))
                    .Where(i => i.IsGenericMethod)
                    .Single(i => i.GetParameters().Select(a => a.ParameterType).SequenceEqual(parameterTypes));
                var options = new JsonSerializerOptions();
                var genericMethodInfo = deserializer.MakeGenericMethod(propertyType);
                return (valueKind == JsonValueKind.Object) ? genericMethodInfo.Invoke(null, new object[] { value, options }) : null;
            case "Boolean": 
                return valueKind is JsonValueKind.True or JsonValueKind.False ? value.GetBoolean() : null;
            default:
                return null;
        }
    }

}