using Domain.Attributes;
using Domain.Models;
using Domain.WorkResults;
using Logistic.Application.Interfaces;
using Logistic.Application.Services;
using Logistic.Application.Validators;
using Logistic.Application.WorkResult;
using Microsoft.Extensions.DependencyInjection;

namespace Logistic.Application;

public static class Business
{
    public static void AddBusinessGeneration(this IServiceCollection services)
    {
        var assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == "Logistic.Domain");
        var autoGeneratableTypes = assembly
            .GetTypes()
            .Where(t => t.GetCustomAttributes(typeof(AutoGenerateAttribute), true).Any());

        foreach (var type in autoGeneratableTypes)
        {
            //var baseBusinessInterfaceType = typeof(IBaseBusinessService<>).MakeGenericType(type);
            var baseBusinessServiceType = typeof(AutogeneratedService<>).MakeGenericType(type);
            /*var implementationType =
                Assembly.GetExecutingAssembly().GetType($"{type.Namespace}.Services.{type.Name}Service");*/

            services.AddScoped(baseBusinessServiceType, baseBusinessServiceType);
            
            AddValidatorsForType(services, type);
        }

    }
    
    private static readonly List<Type> BusinessTypesForResultContainer = new List<Type>()
    {
        typeof(IBusinessService<>),
        typeof(IValidatable<>),
    };
    
    public static void AddBusinessDependencies(this IServiceCollection services)
    {
        services.AddScoped<CustomerService, CustomerService>();
        services.AddScoped<IBusinessActionMessageContainer, BusinessMessagesContainer>();

        AddValidators(services);
    }

    private static void AddValidators(IServiceCollection services)
    {
        services.AddScoped<IValidatable<Customer>, CustomerValidator>();
    }
    
    private static void AddValidatorsForType(IServiceCollection services, Type baseModelType)
    {
        // тут важно искать по конкретному типу, т.е. указать какой именно дженерик нас интересует. Иначе в сборке не найдет.
        var interfaceType = typeof(IValidatable<>).MakeGenericType(baseModelType); 
        var validatorTypes = AppDomain.CurrentDomain
            .GetAssemblies()
            .SelectMany(a => a.GetTypes())
            .Where(t => interfaceType.IsAssignableFrom(t));
        
        if (validatorTypes.Any())
        {
            foreach (var type in validatorTypes)
            {
                services.AddScoped(interfaceType, type);
            }
        }
        else
        {
            services.AddScoped(interfaceType, typeof(BaseModelValidator<>).MakeGenericType(baseModelType));
        }
    }
}