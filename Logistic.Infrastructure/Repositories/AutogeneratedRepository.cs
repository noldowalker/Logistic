using Domain.Interfaces;
using Domain.Models;
using Microsoft.EntityFrameworkCore;

namespace Logistic.Infrastructure.Repositories;

public class AutogeneratedRepository<T> : IBaseModelsRepository<T> where T : BaseModel
{
    private DataBaseContext _db;

    public AutogeneratedRepository(DataBaseContext db)
    {
        _db = db;
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    public IEnumerable<T> GetList()
    {
        var result = _db.Set<T>().ToList();

        if (result.Count > 0)
            IncludeForeignKeys();
        
        return result;
    }

    public T? Get(long id)
    {
        var entity =  _db.Set<T>().Find(id);

        if (entity != null)
        {
            IncludeForeignKeys();
        }
        
        return entity;
    }

    public void Create(T item)
    {
        _db.Set<T>().Add(item);
    }

    public void Update(T item)
    {
        _db.Entry(item).State = EntityState.Modified;
    }

    public void Delete(long id)
    {
        var entity = _db.Set<T>().Find(id);
        if (entity != null)
            _db.Set<T>().Remove(entity);
    }

    public async Task SaveAsync()
    {
        await _db.SaveChangesAsync();
    }
    
    private bool disposed = false;
    public virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                _db.Dispose();
            }
        }
        disposed = true;
    }

    private void IncludeForeignKeys()
    {
        var entityType = typeof(T);
        var baseModelType = typeof(BaseModel);

        foreach (var property in entityType.GetProperties())
        {
            if (baseModelType.IsAssignableFrom(property.PropertyType))
                _db.Set<T>().Include(property.Name).Load();
        }
    }
}